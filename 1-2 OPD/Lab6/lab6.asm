;По выданному преподавателем варианту разработать и исследовать работу комплекса программ обмена данными в режиме прерывания программы. 
;Основная программа должна изменять содержимое заданной ячейки памяти (Х), которое должно быть представлено как знаковое число. 
;Область допустимых значений изменения Х должна быть ограничена заданной функцией F(X) и конструктивными особенностями регистра данных ВУ (8-ми битное знаковое представление). 
;Программа обработки прерывания должна выводить на ВУ модифицированное значение Х в соответствии с вариантом задания, а также игнорировать все необрабатываемые прерывания.
;1.	Основная программа должна декрементировать содержимое X (ячейки памяти с адресом 03F) в цикле. 
;2.	Обработчик прерывания должен по нажатию кнопки готовности ВУ-1 осуществлять вывод результата вычисления функции F(X)=6X+1 на данное ВУ, 
;  a по нажатию кнопки готовности ВУ-3 прибавить содержимое РД данного ВУ к Х, результат записать в X 
;3.	Если Х оказывается вне ОДЗ при выполнении любой операции по его изменению, то необходимо в Х записать максимальное по ОДЗ число.

    ORG 0x0
V0:         WORD $DEFAULT, 0x180
V1:         WORD $int_1, 0x180
V2:         WORD $DEFAULT, 0x180
V3:         WORD $int_3, 0x180
V4:         WORD $DEFAULT, 0x180
V5:         WORD $DEFAULT, 0x180
V6:         WORD $DEFAULT, 0x180
V7:         WORD $DEFAULT, 0x180
DEFAULT:    IRET                    ; Так как MR 4-ёх битыный, то можно не писать отделую логику для прерывания каждого ВУ. Для этого есть 3-ий бит MR

    ORG 0x3F
X:          WORD ?
max:        WORD 0x0015             ; 21, максимальное значение X
min:        WORD 0xFFEB             ; -21, минимальное значение X

START:                              ; Инициализация векторов прерывания
            DI                      ; Запрет прерывания
            
            CLA
            OUT 1                   ; MR КВУ-0 на вектор 0 и запрет прерывания
            OUT 5                   ; MR КВУ-2 на вектор 0 и запрет прерывания
            OUT 0xB                 ; MR КВУ-4 на вектор 0 и запрет прерывания
            OUT 0xE                 ; MR КВУ-5 на вектор 0 и запрет прерывания
            OUT 0x12                ; MR КВУ-6 на вектор 0 и запрет прерывания
            OUT 0x16                ; MR КВУ-7 на вектор 0 и запрет прерывания
            OUT 0x1A                ; MR КВУ-8 на вектор 0 и запрет прерывания
            OUT 0x1E                ; MR КВУ-9 на вектор 0 и запрет прерывания

            LD #9                   ; Разрешаем прерывание и связываем с вектором №1 
            OUT 3                   ; (1000 | 0001 = 1001 = 9) в MR КВУ-1

            LD #0xB                 ; Разрешаем прерывание и связываем с вектором №3 
            OUT 7                   ; (1000 | 0011 = 1011 = B) в MR КВУ-3
            EI

main:                               
            DI                      ; Запрещаем прерывания для атомаронсти операции
            LD X
            NOP
            DEC
            CALL check
            ST X
            NOP
            EI
            JUMP main

int_1:      DI                      ; Обработка прерывания из ВУ-1
            LD X
            NOP
            ASL
            ASL
            ADD X
            ADD X
            INC
            OUT 2
            NOP
            EI
            IRET

int_3:      DI                      ; Обработка прерывания из ВУ-3
            LD X                    ; тут мы загружаем X в AC, чтобы посмотреть с каким X мы работаем (это чисто для отладки)
            NOP
            IN 6
            SXTB
            ADD X
            NOP
            CALL check
            ST X
            NOP
            EI
            IRET

check:                          ; Проверка на ОДЗ
check_max:  CMP max
            BMI check_min       ; Если AC - max < 0, то прыгаем в проверку на минимум
            JUMP ld_max         ; Иначе прыгаем на загузку макс значения
check_min:  CMP min             ; 
            BPL return          ; Если AC - min >= 0, то просто возращаемся
ld_max:     LD max     
return:     RET